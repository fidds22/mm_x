name: CI/CD Pipeline - Manoela Madera Art Portfolio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Lint and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # Build and Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Test build output
        run: |
          if [ -d ".next" ]; then
            echo "‚úÖ Build successful - .next directory created"
            ls -la .next/
          else
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi

      - name: Check bundle size
        run: |
          if [ -f ".next/static/chunks/pages/_app-*.js" ]; then
            echo "üì¶ Bundle size check:"
            du -sh .next/static/chunks/
          fi

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod=false'

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, build, performance, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notify deployment success
        run: |
          echo "üöÄ Production deployment successful!"
          echo "üåê Site URL: https://your-domain.vercel.app"

  # Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          echo "üìö Checking documentation files..."
          if [ -f "PROJECT_CONTEXT.md" ]; then
            echo "‚úÖ PROJECT_CONTEXT.md exists"
          else
            echo "‚ùå PROJECT_CONTEXT.md missing"
            exit 1
          fi
          
          if [ -f "TECH_STACK.md" ]; then
            echo "‚úÖ TECH_STACK.md exists"
          else
            echo "‚ùå TECH_STACK.md missing"
            exit 1
          fi
          
          if [ -f "PROJECT_GUIDELINES.md" ]; then
            echo "‚úÖ PROJECT_GUIDELINES.md exists"
          else
            echo "‚ùå PROJECT_GUIDELINES.md missing"
            exit 1
          fi

      - name: Check for TODO comments
        run: |
          echo "üîç Checking for TODO comments..."
          if grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" .; then
            echo "‚ö†Ô∏è Found TODO comments - consider addressing them"
          else
            echo "‚úÖ No TODO comments found"
          fi
